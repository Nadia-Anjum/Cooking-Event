{
  "version": 3,
  "sources": ["../../../app/routes/profile.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\profile.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\profile.jsx\");\n  import.meta.hot.lastModified = \"1710277249883.806\";\n}\n// REMIX HMR END\n\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport { authenticator } from \"../services/auth.server\";\nimport mongoose from \"mongoose\";\nimport { json } from \"@remix-run/node\";\nimport EventCard from \"../components/EventCard\";\nimport { redirect } from \"@remix-run/node\";\nimport { Link } from \"react-router-dom\";\nexport async function loader({\n  request\n}) {\n  // Get the authenticated user\n  const authUser = await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/signin\"\n  });\n\n  // Fetch the user from the database and populate eventsAttending\n  const user = await mongoose.models.User.findById(authUser._id).populate('eventsAttending');\n\n  // Get all events where the user field matches the authenticated user's ID\n  const events = await mongoose.models.Event.find({\n    user: user._id\n  }).populate('user').exec();\n  return json({\n    user,\n    events\n  });\n}\nexport default function Profile() {\n  _s();\n  const {\n    user,\n    events\n  } = useLoaderData();\n  console.log(user);\n  return <div className=\"page profileIntro\">\r\n      <h1>Profile</h1>\r\n      <div className=\"profile-container\">\r\n        <div>\r\n          <p className=\"profileP\">\r\n            Name: {user.name} {user.lastname} <br></br>\r\n            Mail: {user.mail}\r\n          </p>\r\n        </div>\r\n\r\n        <Form method=\"post\">\r\n          <button>Log out</button>\r\n        </Form>\r\n      </div>\r\n\r\n      \r\n      <h2 className=\"profile-header2\">My added events</h2>\r\n      \r\n      <div className=\"profile-event\">\r\n      {events.map(event => <Link to={`/events/${event._id}`} key={event._id}>\r\n          <EventCard event={event} />\r\n        </Link>)}\r\n    </div>\r\n     \r\n\r\n      <div id=\"events-attending\">\r\n        <h2 className=\"profile-header2\">Events Attending</h2>\r\n        <ul className=\"profile-event-attendings\">\r\n        {user.eventsAttending.map(event => <li className=\"li-attendingsProfile\" key={event._id}>\r\n              <Link to={`/events/${event._id}`}>\r\n                <h2>{event.title}</h2>\r\n                <br></br>\r\n                <img src={event.image} alt={event.title} />\r\n                <br></br>\r\n                {event.caption}\r\n                <br></br>\r\n                <br></br>\r\n                {event.date}, {event.time}, {event.location} \r\n              </Link>\r\n              <Form method=\"post\">\r\n                <input type=\"hidden\" name=\"eventId\" value={event._id} />\r\n                <button type=\"submit\" className=\"cancelAt\">Cancel</button>\r\n              </Form>\r\n            </li>)}\r\n        </ul>\r\n      </div>\r\n\r\n      <br></br>\r\n    </div>;\n}\n_s(Profile, \"DZSILNgvCuY7JgNc9CJU+C6gISs=\", false, function () {\n  return [useLoaderData];\n});\n_c = Profile;\nexport async function action({\n  request\n}) {\n  const body = new URLSearchParams(await request.text());\n  if (body.has('eventId')) {\n    const eventId = body.get('eventId');\n    const authUser = await authenticator.isAuthenticated(request, {\n      failureRedirect: \"/signin\"\n    });\n    const User = mongoose.models.User;\n    const Event = mongoose.models.Event;\n    const user = await User.findById(authUser._id);\n    const event = await Event.findById(eventId);\n\n    // Remove the event from the user's eventsAttending array\n    user.eventsAttending = user.eventsAttending.filter(id => id.toString() !== eventId);\n    await user.save();\n\n    // Remove the user from the event's attendees array\n    if (event.attendees) {\n      event.attendees = event.attendees.filter(attendeeId => attendeeId.toString() !== authUser._id.toString());\n      await event.save();\n    }\n    return redirect('/profile');\n  }\n  await authenticator.logout(request, {\n    redirectTo: \"/signin\"\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"Profile\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,kBAA8B;AAC9B,sBAAqB;AACrB,kBAAqB;AAErB,IAAAA,eAAyB;AACzB;AA6BM;AAvDN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mCAAqC,EAAE;AAAA,EAChF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA0B;AAC1B,cAAY,IAAI,eAAe;AACjC;AA8Be,SAAR,UAA2B;AAChC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI,cAAc;AAClB,UAAQ,IAAI,IAAI;AAChB,SAAO,mDAAC,SAAI,WAAU,qBAClB;AAAA,uDAAC,QAAG,uBAAJ;AAAA;AAAA;AAAA;AAAA,WAAW;AAAA,IACX,mDAAC,SAAI,WAAU,qBACb;AAAA,yDAAC,SACC,6DAAC,OAAE,WAAU,YAAW;AAAA;AAAA,QACf,KAAK;AAAA,QAAK;AAAA,QAAE,KAAK;AAAA,QAAS;AAAA,QAAC,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,eAAI;AAAA,QAAK;AAAA,QACpC,KAAK;AAAA,WAFd;AAAA;AAAA;AAAA;AAAA,aAGA,KAJF;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MAEA,mDAAC,QAAK,QAAO,QACX,6DAAC,YAAO,uBAAR;AAAA;AAAA;AAAA;AAAA,aAAe,KADjB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAVF;AAAA;AAAA;AAAA;AAAA,WAWA;AAAA,IAGA,mDAAC,QAAG,WAAU,mBAAkB,+BAAhC;AAAA;AAAA;AAAA;AAAA,WAA+C;AAAA,IAE/C,mDAAC,SAAI,WAAU,iBACd,iBAAO,IAAI,WAAS,mDAAC,QAAK,IAAI,WAAW,MAAM,OAC5C,6DAAC,aAAU,SAAX;AAAA;AAAA;AAAA;AAAA,WAAyB,KAD+B,MAAM,KAA7C;AAAA;AAAA;AAAA;AAAA,WAEnB,CAAO,KAHT;AAAA;AAAA;AAAA;AAAA,WAIF;AAAA,IAGE,mDAAC,SAAI,IAAG,oBACN;AAAA,yDAAC,QAAG,WAAU,mBAAkB,gCAAhC;AAAA;AAAA;AAAA;AAAA,aAAgD;AAAA,MAChD,mDAAC,QAAG,WAAU,4BACb,eAAK,gBAAgB,IAAI,WAAS,mDAAC,QAAG,WAAU,wBAC3C;AAAA,2DAAC,QAAK,IAAI,WAAW,MAAM,OACzB;AAAA,6DAAC,QAAI,gBAAM,SAAX;AAAA;AAAA;AAAA;AAAA,iBAAiB;AAAA,UACjB,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,iBAAI;AAAA,UACJ,mDAAC,SAAI,KAAK,MAAM,OAAO,KAAK,MAAM,SAAlC;AAAA;AAAA;AAAA;AAAA,iBAAyC;AAAA,UACzC,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,iBAAI;AAAA,UACH,MAAM;AAAA,UACP,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,iBAAI;AAAA,UACJ,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,iBAAI;AAAA,UACH,MAAM;AAAA,UAAK;AAAA,UAAG,MAAM;AAAA,UAAK;AAAA,UAAG,MAAM;AAAA,aARrC;AAAA;AAAA;AAAA;AAAA,eASA;AAAA,QACA,mDAAC,QAAK,QAAO,QACX;AAAA,6DAAC,WAAM,MAAK,UAAS,MAAK,WAAU,OAAO,MAAM,OAAjD;AAAA;AAAA;AAAA;AAAA,iBAAsD;AAAA,UACtD,mDAAC,YAAO,MAAK,UAAS,WAAU,YAAW,sBAA3C;AAAA;AAAA;AAAA;AAAA,iBAAiD;AAAA,aAFnD;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,WAduE,MAAM,KAAhD;AAAA;AAAA;AAAA;AAAA,aAe/B,CAAK,KAhBT;AAAA;AAAA;AAAA;AAAA,aAiBA;AAAA,SAnBF;AAAA;AAAA;AAAA;AAAA,WAoBA;AAAA,IAEA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,WAAI;AAAA,OA/CD;AAAA;AAAA;AAAA;AAAA,SAgDL;AACJ;AACA,GAAG,SAAS,gCAAgC,OAAO,WAAY;AAC7D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AA8BL,IAAI;AACJ,aAAa,IAAI,SAAS;AAE1B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_node"]
}
