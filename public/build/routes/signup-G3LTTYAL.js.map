{
  "version": 3,
  "sources": ["../../../app/routes/signup.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\signup.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\signup.jsx\");\n  import.meta.hot.lastModified = \"1710277249886.7974\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, NavLink, useLoaderData } from \"@remix-run/react\";\nimport { sessionStorage } from \"../services/session.server\";\nimport mongoose from \"mongoose\";\nexport async function loader({\n  request\n}) {\n  // Retrieve error message from session if present\n  const session = await sessionStorage.getSession(request.headers.get(\"Cookie\"));\n  // Get the error message from the session\n  const error = session.get(\"sessionErrorKey\");\n  return json({\n    error\n  });\n}\nexport default function SignUp() {\n  _s();\n  // if i got an error it will come back with the loader dxata\n  const loaderData = useLoaderData();\n  console.log(\"loaderData\", loaderData);\n  return <div id=\"sign-up-page\" className=\"page\">\r\n        <h1>Sign Up</h1>\r\n        <Form id=\"sign-up-form\" method=\"post\">\r\n        \r\n      <div className=\"input-group\">\r\n        <div className=\"input-field\">\r\n         <label htmlFor=\"name\">Name</label>\r\n         <input id=\"name\" type=\"text\" name=\"name\" aria-label=\"name\" placeholder=\"Type your name...\" required />\r\n        </div>\r\n\r\n        <div className=\"input-field\">\r\n        <label htmlFor=\"lastname\">Last Name</label>\r\n        <input id=\"lastname\" type=\"text\" name=\"lastname\" aria-label=\"lastname\" placeholder=\"Type your last name...\" required />\r\n        </div>\r\n      </div>\r\n\r\n        <label htmlFor=\"mail\">Mail</label>\r\n        <input id=\"mail\" type=\"email\" name=\"mail\" aria-label=\"mail\" placeholder=\"Type your mail...\" required />\r\n\r\n        <label htmlFor=\"password\">Password</label>\r\n        <input id=\"password\" type=\"password\" name=\"password\" aria-label=\"password\" placeholder=\"Type your password...\" autoComplete=\"current-password\" />\r\n          \r\n          <div className=\"btns\">\r\n            <button>Sign up</button>\r\n          </div>\r\n          <div className=\"error-message\">{loaderData?.error ? <p>{loaderData?.error?.message}</p> : null}</div>\r\n        </Form>\r\n        <p style={{\n      textAlign: 'center'\n    }}>\r\n        Already have an account? <NavLink to=\"/signin\"><b>Sign in here.</b></NavLink>\r\n      </p>\r\n      </div>;\n}\n_s(SignUp, \"ceKF1Gd7W4lGV+M78eBsU+KQIkw=\", false, function () {\n  return [useLoaderData];\n});\n_c = SignUp;\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const newUser = Object.fromEntries(formData); // convert the form data to an object\n\n  // Validate user input\n  if (!newUser.mail || !newUser.mail.trim().includes('@') || !newUser.mail.trim().includes('.')) {\n    // Store the error message in the session\n    const session = await sessionStorage.getSession(request.headers.get(\"Cookie\"));\n    session.set(\"sessionErrorKey\", {\n      message: \"Invalid email address\"\n    });\n    const cookie = await sessionStorage.commitSession(session);\n    return redirect(\"/signup\", {\n      headers: {\n        \"Set-Cookie\": cookie\n      }\n    });\n  }\n  if (!newUser.password || newUser.password.trim().length < 8 || !/[a-z]/i.test(newUser.password.trim()) || !/[0-9]/.test(newUser.password.trim())) {\n    // Store the error message in the session\n    const session = await sessionStorage.getSession(request.headers.get(\"Cookie\"));\n    session.set(\"sessionErrorKey\", {\n      message: \"Password must be at least 8 characters long and contain at least one letter and one number\"\n    });\n    const cookie = await sessionStorage.commitSession(session);\n    return redirect(\"/signup\", {\n      headers: {\n        \"Set-Cookie\": cookie\n      }\n    });\n  }\n  const result = await mongoose.models.User.create(newUser);\n\n  // If the user is created successfully redirect to /signin\n  if (result) {\n    return redirect(\"/signin\");\n  } else {\n    return redirect(\"/signup\");\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"SignUp\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
