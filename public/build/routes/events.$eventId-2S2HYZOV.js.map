{
  "version": 3,
  "sources": ["../../../app/routes/events.$eventId.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\events.$eventId.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\events.$eventId.jsx\");\n  import.meta.hot.lastModified = \"1710277249878.3013\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport mongoose from \"mongoose\";\nimport EventCard from \"../components/EventCard\";\nimport { authenticator } from \"../services/auth.server\";\nimport { sessionStorage } from \"../services/session.server\";\nimport { Link } from \"react-router-dom\";\nexport async function loader({\n  request,\n  params\n}) {\n  let authUser = null;\n  // Check if the user is authenticated\n  try {\n    authUser = await authenticator.isAuthenticated(request);\n  } catch (error) {\n    console.error(error);\n  }\n\n  // Load the event and the user who created it\n  const event = await mongoose.models.Event.findById(params.eventId).populate(\"user\").populate(\"attendees\").populate({\n    path: 'comments.user',\n    model: 'User'\n  }).exec();\n\n  // Load similar events created by the same user\n  const similarEvents = await mongoose.models.Event.find({\n    user: event.user._id\n  }).populate('user').limit(5).exec();\n  return json({\n    event,\n    authUser,\n    similarEvents\n  });\n}\nexport default function Event() {\n  _s();\n  const {\n    event,\n    authUser,\n    similarEvents\n  } = useLoaderData();\n  console.log(\"EVENT\", event);\n  function confirmDelete(event) {\n    const response = confirm(\"Please confirm you want to delete this post event.\");\n    if (!response) {\n      event.preventDefault();\n    }\n  }\n  return <div id=\"event-page\" className=\"page page2\">\r\n      <div className=\"column1\">\r\n      <EventCard event={event} />\r\n      {authUser && authUser._id === event.user._id && <div className=\"btns\">\r\n          <Form action=\"update\">\r\n            <button>Update</button>\r\n          </Form>\r\n          <Form action=\"destroy\" method=\"post\" onSubmit={confirmDelete}>\r\n            <button>Delete</button>\r\n          </Form>\r\n        </div>}\r\n      </div>\r\n\r\n\r\n      <div className=\"column2\">\r\n        <div className=\"att-main\">\r\n\r\n      <div className=\"attend-container\">\r\n        <h2>Join Now: Get Involved in This Event!</h2>\r\n        <p>Get ready to tantalize your taste buds! Whether you are a seasoned chef or just love good food, join our thrilling cooking event now!</p>\r\n        {authUser && event.attendees && !event.attendees.includes(authUser._id) && <Form action=\"\" method=\"post\">\r\n            <button>Join here</button>\r\n          </Form>}\r\n      </div>\r\n      <ul className=\"att-outcome\">\r\n        <h2>Attendees</h2>\r\n        {event.attendees && event.attendees.map(user => <li key={user._id}>{user.name} {user.lastname}</li>)}\r\n      </ul>\r\n\r\n      </div>\r\n\r\n\r\n      <div className=\"comment-section\">\r\n        <h2>Comments</h2>\r\n        {authUser && <Form action=\"\" method=\"post\">\r\n            <textarea name=\"content\" required></textarea>\r\n            <button type=\"submit\">Post Comment</button>\r\n          </Form>}\r\n        <ul className=\"comment-outcome-ul\">\r\n          {event.comments.map((comment, index) => <li key={index} className=\"comment-info\">\r\n              <p>{comment.content}</p>\r\n              <p>Posted by: {comment.user ? `${comment.user.name}` : 'Unknown'}</p>\r\n              <p style={{\n              textAlign: 'end'\n            }}>Posted at: {new Date(comment.createdAt).toLocaleString()}</p>\r\n            </li>)}\r\n        </ul>\r\n      </div>\r\n      </div>\r\n\r\n      <div className=\"similar-events-main\">\r\n        <h2 className=\"s-h2\">Similar Events</h2>\r\n        <div className=\"similar-events\">\r\n          {similarEvents.map(similarEvent => <Link to={`/events/${similarEvent._id}`} key={similarEvent._id}>\r\n              <EventCard event={similarEvent} />\r\n            </Link>)}\r\n        </div> \r\n      </div>\r\n\r\n    </div>;\n}\n_s(Event, \"lvgDoaW2dmSf+FDMt9AKilYsPhs=\", false, function () {\n  return [useLoaderData];\n});\n_c = Event;\nexport async function action({\n  request,\n  params\n}) {\n  const session = await sessionStorage.getSession(request.headers.get(\"Cookie\"));\n  const authUser = session.get(\"user\");\n  const eventId = params.eventId;\n  if (!authUser) {\n    return redirect(\"/login\");\n  }\n  const User = mongoose.models.User;\n  const Event = mongoose.models.Event;\n  const user = await User.findById(authUser._id);\n  const event = await Event.findById(eventId);\n  if (request.method === 'POST') {\n    const formData = await request.formData();\n    const content = formData.get('content');\n    if (content) {\n      // If the form has a 'content' field, it's a comment\n      const Comment = mongoose.models.Comment;\n      const comment = new Comment({\n        content,\n        user: authUser._id,\n        event: eventId\n      }); // Tilknyt authUser._id til kommentaren\n      await comment.save();\n      event.comments.push(comment);\n      await event.save();\n    }\n  }\n\n  // Always allow attendance, regardless of request method\n  if (event.attendees && !event.attendees.includes(authUser._id)) {\n    event.attendees.push(authUser._id);\n    await event.save();\n  }\n  if (user.eventsAttending && !user.eventsAttending.includes(eventId)) {\n    user.eventsAttending.push(eventId);\n    await user.save();\n  }\n  return redirect(`/events/${eventId}`);\n}\nvar _c;\n$RefreshReg$(_c, \"Event\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["event"]
}
